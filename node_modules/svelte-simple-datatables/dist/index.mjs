function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function null_to_empty(value) {
    return value == null ? '' : value;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
class HtmlTag {
    constructor(anchor = null) {
        this.a = anchor;
        this.e = this.n = null;
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            this.e = element(target.nodeName);
            this.t = target;
            this.h(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */
function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}
function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores);
    const stores_array = single
        ? [stores]
        : stores;
    const auto = fn.length < 2;
    return readable(initial_value, (set) => {
        let inited = false;
        const values = [];
        let pending = 0;
        let cleanup = noop;
        const sync = () => {
            if (pending) {
                return;
            }
            cleanup();
            const result = fn(single ? values[0] : values, set);
            if (auto) {
                set(result);
            }
            else {
                cleanup = is_function(result) ? result : noop;
            }
        };
        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
            values[i] = value;
            pending &= ~(1 << i);
            if (inited) {
                sync();
            }
        }, () => {
            pending |= (1 << i);
        }));
        inited = true;
        sync();
        return function stop() {
            run_all(unsubscribers);
            cleanup();
        };
    });
}

const createOptions = () => {
    const {subscribe, set } = writable({
        sortable: true,
        pagination: true,
        rowPerPage: 50,
        columnFilter: false,
        scrollY: true,
        css: true,
        labels: {
            search: 'Search...',
            filter: 'Filter',
            noRows: 'No entries to found',
            info: 'Showing {start} to {end} of {rows} entries',
            previous: 'Previous',
            next: 'Next',
        },
        blocks: {
            searchInput: true, 
            paginationButtons: true,
            paginationRowCount: true,
        }
    });
    return {
        subscribe, set, 
        get: () => {
            let $store;
            options.subscribe(store => $store = store);
            return $store
        },
        update: (opt) => {
            opt.labels = opt.labels ? opt.labels : {};
            const labels = {
                search:   typeof opt.labels.search   === 'string' ? opt.labels.search   : 'Search...',
                filter:   typeof opt.labels.filter   === 'string' ? opt.labels.filter   : 'Filter',
                noRows:   typeof opt.labels.noRows   === 'string' ? opt.labels.noRows   : 'No entries to found',
                info:     typeof opt.labels.info     === 'string' ? opt.labels.info     : 'Showing {start} to {end} of {rows} entries',
                previous: typeof opt.labels.previous === 'string' ? opt.labels.previous : 'Previous',
                next:     typeof opt.labels.next     === 'string' ? opt.labels.next     : 'Next',                
            };   
            opt.blocks = opt.blocks ? opt.blocks : {};
            const blocks = {
                searchInput:        typeof opt.blocks.searchInput        === 'boolean' ? opt.blocks.searchInput        : true, 
                paginationButtons:  typeof opt.blocks.paginationButtons  === 'boolean' ? opt.blocks.paginationButtons  : true,
                paginationRowCount: typeof opt.blocks.paginationRowCount === 'boolean' ? opt.blocks.paginationRowCount : true,
            };
            const parsed = {
                sortable:     typeof opt.sortable     === 'boolean' ? opt.sortable     : true,
                pagination:   typeof opt.pagination   === 'boolean' ? opt.pagination   : true,
                rowPerPage:   typeof opt.rowPerPage   === 'number'  ? opt.rowPerPage   : 50,
                columnFilter: typeof opt.columnFilter === 'boolean' ? opt.columnFilter : false, 
                scrollY:      typeof opt.scrollY      === 'boolean' ? opt.scrollY      : true, 
                css:          typeof opt.css          === 'boolean' ? opt.css          : true, 
                labels: labels,
                blocks: blocks
            };
            options.set(parsed);
        }
    }
};
const options = createOptions();

const rowCount = writable(0);

const createPageNumber = () => {
	const { subscribe, update } = writable(1);
	return {
		subscribe, update,
		set: (number) => update(store => {
			let $rowPerPage, $rowCount;
			rowCount.subscribe(store => $rowCount = store);
			options.subscribe(store => $rowPerPage = store.rowPerPage);
			if ( number >= 1 && number <= Math.ceil($rowCount / $rowPerPage) ) {
				store = parseInt(number);
			}
			document.querySelector('section.datatable .dt-table').scrollTop = 0;
			return store
		})
	}
};
const pageNumber = createPageNumber();

const datatableWidth = writable(null);

const createLocal = () => {
	const { subscribe, update } = writable([]);
	return {
		subscribe, update,
		add: (key, value) => update(store => {
			const filter = {key: key, value: value}; 
			store = store.filter(item => { return item.key !== key && item.value.length > 0 });
			store.push(filter);
			return store
		}),
		remove: () => update(store => store = [])
	}
};
const local = createLocal();

const createGlobal = () => {
	const { subscribe, update } = writable(null);
	return {
		subscribe, 
		set: (value) => update(store => {
			store = (value.length > 0) ? value : null;
			return store
		}),
		remove: () => update(store => store = null)
	}
};
const global = createGlobal();

const createData = () => {
	const { subscribe, set, update } = writable([]);
	return {
		subscribe, set,
		sortAsc: (key) => update(store => {
			try {
				store.sort( (a, b) => key(b).localeCompare(key(a)) );
			} catch (e) {
				return store.sort( (a, b) => parseFloat(key(b)) - parseFloat(key(a)))
			}
			return store.sort( (a, b) => key(b).localeCompare(key(a)) )
			
		}),
		sortDesc: (key) => update(store => {
			try {
				store.sort( (a, b) => key(a).localeCompare(key(b)) );
			} catch (e) {
				return store.sort( (a, b) => parseFloat(key(a)) - parseFloat(key(b)))
			}
			return store.sort( (a, b) => key(a).localeCompare(key(b)) )
		}),
	}
};
const data = createData();

const filtered = derived(
	[data, global, local],
    ([$data, $global, $local]) => {
		if ($global) {
			$data = $data.filter( item => {
				return Object.keys(item).some( k => {
					return item[k].toString().toLowerCase().indexOf($global.toString().toLowerCase()) > -1
				})
			});
		}
		if ($local.length > 0) {
			$local.forEach(filter => {
				return $data = $data.filter( item => filter.key(item).toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) > -1)
			});
		}
		rowCount.set($data.length);
		return $data
	} 	
);

const rows = derived(
	[filtered, options, pageNumber],
    ([$filtered, $options, $pageNumber]) => {
		if (!$options.pagination) {
			return $filtered
		}
		return $filtered.slice( ($pageNumber - 1) * $options.rowPerPage, $pageNumber * $options.rowPerPage) 
	} 
);

const createColumns = () => {
	const { subscribe, set, update } = writable([]);
	return {
		subscribe, set, update,
		get: () => {
			let $columns;
			columns.subscribe(store => $columns = store);
			return $columns
		},
		sort: (element, key) => {
			if (options.get().sortable !== true || typeof key === 'undefined') {
				return
			}
			if (
				element.classList.contains('sortable') &&
				element.classList.contains('asc')
			) {
				Array.from(element.parentNode.children).forEach((item) =>
					item.classList.remove('asc', 'desc')
				);
				element.classList.add('desc');
				data.sortDesc(key);
				pageNumber.set(1);
			} else {
				Array.from(element.parentNode.children).forEach((item) =>
					item.classList.remove('desc', 'asc')
				);
				element.classList.add('asc');
				data.sortAsc(key);
				pageNumber.set(1);
			}
			columns.redraw();
		},
		filter: (key, value) => {
			pageNumber.set(1);
			local.add(key, value);
			columns.redraw();
		},
		draw: () => {
			setTimeout(() => {
				const tbody = document.querySelector('.datatable table tbody tr');
				if (tbody === null) return
				const thead = document.querySelectorAll('.dt-header thead tr');
				const $columns = columns.get();
				thead.forEach(tr => {
					let i = 0;
					Array.from(tbody.children).forEach(td => {
						let th = tr.children[i];
						let thW = th.getBoundingClientRect().width;
						let tdW = td.getBoundingClientRect().width;
						// let columnMinWidth = parseFloat(columns.get()[i].minWidth.replace('px', ''))
						if (tdW > thW) { 
							th.style.minWidth = tdW + 'px';
							th.style.maxWidth = tdW + 'px';
							$columns[i].minWidth = tdW;
						}
						else {
							td.style.minWidth = thW + 'px';
							td.style.maxWidth = thW + 'px';
							$columns[i].minWidth = thW;
						} 
						i++;
					});
				});
			}, 50);	
		},
		redraw: () => {
			if ( options.get().scrollY === false ) {
				return
			}
			setTimeout(() => {
				const tbody = document.querySelector('.datatable table tbody tr');
				if (tbody === null) return
				const thead = document.querySelectorAll('.dt-header thead tr');
				thead.forEach(tr => {
					let i = 0;
					Array.from(tbody.children).forEach(td => {
						let th = tr.children[i];
						let thW = th.getBoundingClientRect().width;
						let tdW = td.getBoundingClientRect().width;
						let columnMinWidth = parseFloat(columns.get()[i].minWidth);
						if (tdW > thW || thW > columnMinWidth) { 
							th.style.minWidth = tdW + 'px';
							th.style.maxWidth = tdW + 'px';
						}
						else {
							td.style.minWidth = thW + 'px';
							td.style.maxWidth = thW + 'px';
						} 
						i++;
					});
				});
			}, 50);			
		},
	}
};
const columns = createColumns();

const datatable = {
    init: () => {
        datatable.resize();
        datatable.addEventScrollX();
        datatable.getColumns();
        new ResizeObserver((mutations) => {
            datatable.resize();
        }).observe(document.querySelector('section.datatable').parentElement);
    },
    reset: () => {
        pageNumber.update(store => store = 1);
        global.remove();
        local.remove();
        columns.set([]);
    },
    setRows: (arr) => {
        arr.forEach( (item) => {
            Object.keys(item).forEach( (k) => {
                if (item[k] === null) {
                    item[k] = '';
                }
            });
        });
        data.set(arr);
        return
    },
    getSize: () => {
        const parent = document.querySelector('section.datatable').parentNode;
        const style = getComputedStyle(parent);
        const rect = parent.getBoundingClientRect();
        const getNumber = (pxValue) => { return parseFloat(pxValue.replace('px', ''))  }; 
        return {
            parentWidth: rect.width,
            parentHeight: rect.height,
            width: (rect.width - getNumber(style.paddingLeft) - getNumber(style.paddingRight) - getNumber(style.borderLeftWidth) - getNumber(style.borderRightWidth)) / rect.width,
            height: (rect.height - getNumber(style.paddingTop) - getNumber(style.paddingBottom) - getNumber(style.borderTopWidth) - getNumber(style.borderBottomWidth)) / rect.height,
            top: style.paddingTop,
            right: style.paddingRight,
            bottom: style.paddingBottom,
            left: style.paddingLeft
        }
    },
    resize: () => {
        if ( !document.querySelector('section.datatable') ) return
        const size = datatable.getSize();
        const tableContainer = document.querySelector('section.datatable .dt-table');
        if ( options.get().scrollY ) {
            tableContainer.style.height = datatable.getTableContainerHeight(size.parentHeight * size.height) + 'px';
            columns.redraw();
        }
        datatableWidth.set( size.parentWidth * size.width );
        if (size.parentWidth * size.width < document.querySelector('section.datatable table').offsetWidth) {
            tableContainer.style.overflowX = 'auto';
        }
    },
    getTableContainerHeight: (height) => {
        let paginationBlock;
        if (options.get().pagination && (options.get().blocks.paginationButtons || options.get().blocks.paginationRowCount)) {
            paginationBlock = true;
        }
        const calc = [
            (options.get().blocks.searchInput) ? document.querySelector('.datatable .dt-search').getBoundingClientRect().height : 0,
            (paginationBlock) ? document.querySelector('.datatable .dt-pagination').getBoundingClientRect().height : 0
        ];
        const sum = (a, b) => a + b;
        document.querySelector('section.datatable .dt-table').style.height = height - calc.reduce(sum) + 'px';
    },
    addEventScrollX: () => {
        if ( options.get().scrollY ) {
            document.querySelector('section.datatable .dt-table').addEventListener('scroll', (e) => {
                document.querySelector('.dt-header').style.left = (-1 * e.target.scrollLeft) + 'px';
            });
        }
    },
    getColumns: () => {
        const columnList = [];
        let i = 0;
        document.querySelectorAll('.datatable table thead th').forEach(th => {
            columnList.push({
                index: i,
                html: th.innerHTML,
                key: datatable.getKey(th.dataset.key),
                sort: null,
                classList: th.classList,
                minWidth: th.getBoundingClientRect().width
            });
            th.addEventListener('click', (e) => {
                columns.sort(e.target, datatable.getKey(th.dataset.key));
            }, true);
            i++;
        });
        columns.set(columnList);
    },
    getKey: (key) => {
        if (!key)  return 
        if (key && key.indexOf('=>') > 0) {
            return new Function(`'use strict';return (${key})`)()
        }
        return (x) => x[key]
    },
};

/* src\SearchInput.svelte generated by Svelte v3.29.4 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1kn6xvh-style";
	style.textContent = "input.css.svelte-1kn6xvh{border:1px solid #e0e0e0;border-radius:4px;outline:none;padding:0 8px;line-height:24px;margin:0;height:24px;background:transparent;width:176px;transition:all, 0.1s}input.css.svelte-1kn6xvh:focus{border:2px solid #e0e0e0}input.css.svelte-1kn6xvh::placeholder{color:#9e9e9e;line-height:24px}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let input;
	let input_class_value;
	let input_placeholder_value;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "class", input_class_value = "" + (null_to_empty(/*classList*/ ctx[1]) + " svelte-1kn6xvh"));
			attr(input, "type", "text");
			attr(input, "placeholder", input_placeholder_value = /*$options*/ ctx[2].labels.search);
			attr(input, "ref", /*ref*/ ctx[0]);
			toggle_class(input, "css", /*$options*/ ctx[2].css);
		},
		m(target, anchor) {
			insert(target, input, anchor);

			if (!mounted) {
				dispose = listen(input, "input", /*input_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*classList*/ 2 && input_class_value !== (input_class_value = "" + (null_to_empty(/*classList*/ ctx[1]) + " svelte-1kn6xvh"))) {
				attr(input, "class", input_class_value);
			}

			if (dirty & /*$options*/ 4 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[2].labels.search)) {
				attr(input, "placeholder", input_placeholder_value);
			}

			if (dirty & /*ref*/ 1) {
				attr(input, "ref", /*ref*/ ctx[0]);
			}

			if (dirty & /*classList, $options*/ 6) {
				toggle_class(input, "css", /*$options*/ ctx[2].css);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $options;
	component_subscribe($$self, options, $$value => $$invalidate(2, $options = $$value));
	let { ref = "" } = $$props;
	let { classList = "" } = $$props;

	const search = value => {
		pageNumber.set(1);
		global.set(value);
		columns.redraw();
	};

	const input_handler = e => search(e.target.value);

	$$self.$$set = $$props => {
		if ("ref" in $$props) $$invalidate(0, ref = $$props.ref);
		if ("classList" in $$props) $$invalidate(1, classList = $$props.classList);
	};

	return [ref, classList, $options, search, input_handler];
}

class SearchInput extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1kn6xvh-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { ref: 0, classList: 1 });
	}
}

/* src\components\Search.svelte generated by Svelte v3.29.4 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-11nchoy-style";
	style.textContent = "section.svelte-11nchoy{height:32px}.css.svelte-11nchoy{margin-left:16px}";
	append(document.head, style);
}

function create_fragment$1(ctx) {
	let section;
	let searchinput;
	let current;
	searchinput = new SearchInput({});

	return {
		c() {
			section = element("section");
			create_component(searchinput.$$.fragment);
			attr(section, "class", "dt-search svelte-11nchoy");
			toggle_class(section, "css", /*$options*/ ctx[0].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			mount_component(searchinput, section, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*$options*/ 1) {
				toggle_class(section, "css", /*$options*/ ctx[0].css);
			}
		},
		i(local) {
			if (current) return;
			transition_in(searchinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(searchinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_component(searchinput);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let $options;
	component_subscribe($$self, options, $$value => $$invalidate(0, $options = $$value));
	return [$options];
}

class Search extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-11nchoy-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
	}
}

/* src\PaginationRowCount.svelte generated by Svelte v3.29.4 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-jt0h2f-style";
	style.textContent = ".css.svelte-jt0h2f{color:#616161;line-height:32px;margin-left:16px;font-size:14px}";
	append(document.head, style);
}

// (19:4) {:else}
function create_else_block_1(ctx) {
	let html_tag;
	let raw_value = `<b>${/*start*/ ctx[0]}</b>-<b>${/*end*/ ctx[2]}</b>/<b>${/*rows*/ ctx[3]}</b>` + "";
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*start, end, rows*/ 13 && raw_value !== (raw_value = `<b>${/*start*/ ctx[0]}</b>-<b>${/*end*/ ctx[2]}</b>/<b>${/*rows*/ ctx[3]}</b>` + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (13:4) {#if $datatableWidth > 600}
function create_if_block(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*rows*/ ctx[3] > 0) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (16:8) {:else}
function create_else_block(ctx) {
	let html_tag;
	let raw_value = /*$options*/ ctx[1].labels.noRows + "";
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$options*/ 2 && raw_value !== (raw_value = /*$options*/ ctx[1].labels.noRows + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (14:8) {#if rows > 0}
function create_if_block_1(ctx) {
	let html_tag;
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(/*info*/ ctx[4], target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*info*/ 16) html_tag.p(/*info*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

function create_fragment$2(ctx) {
	let aside;

	function select_block_type(ctx, dirty) {
		if (/*$datatableWidth*/ ctx[5] > 600) return create_if_block;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			aside = element("aside");
			if_block.c();
			attr(aside, "class", "dt-pagination-rowcount svelte-jt0h2f");
			toggle_class(aside, "css", /*$options*/ ctx[1].css);
		},
		m(target, anchor) {
			insert(target, aside, anchor);
			if_block.m(aside, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(aside, null);
				}
			}

			if (dirty & /*$options*/ 2) {
				toggle_class(aside, "css", /*$options*/ ctx[1].css);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(aside);
			if_block.d();
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let $pageNumber;
	let $options;
	let $rowCount;
	let $datatableWidth;
	component_subscribe($$self, pageNumber, $$value => $$invalidate(6, $pageNumber = $$value));
	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
	component_subscribe($$self, rowCount, $$value => $$invalidate(7, $rowCount = $$value));
	component_subscribe($$self, datatableWidth, $$value => $$invalidate(5, $datatableWidth = $$value));
	let start;
	let end;
	let rows;
	let info;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$pageNumber, $options*/ 66) {
			 $$invalidate(0, start = $pageNumber * $options.rowPerPage - $options.rowPerPage + 1);
		}

		if ($$self.$$.dirty & /*$pageNumber, $options, $rowCount*/ 194) {
			 $$invalidate(2, end = Math.min($pageNumber * $options.rowPerPage, $rowCount));
		}

		if ($$self.$$.dirty & /*$rowCount*/ 128) {
			 $$invalidate(3, rows = $rowCount);
		}

		if ($$self.$$.dirty & /*$options, start, end, rows*/ 15) {
			 $$invalidate(4, info = $options.labels.info.replace("{start}", `<b>${start}</b>`).replace("{end}", `<b>${end}</b>`).replace("{rows}", `<b>${rows}</b>`));
		}
	};

	return [start, $options, end, rows, info, $datatableWidth];
}

class PaginationRowCount extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-jt0h2f-style")) add_css$2();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
	}
}

/* src\PaginationButtons.svelte generated by Svelte v3.29.4 */

function add_css$3() {
	var style = element("style");
	style.id = "svelte-9qvh1i-style";
	style.textContent = "section.svelte-9qvh1i.svelte-9qvh1i{display:flex;flex-direction:row}.css.svelte-9qvh1i.svelte-9qvh1i{height:32px;margin-right:16px}.css.svelte-9qvh1i button.svelte-9qvh1i{background:inherit;height:32px;width:32px;color:#616161;font-size:13px;margin:0;padding:0;transition:all, .2s;line-height:32px;border:1px solid #e0e0e0;border-right:none;outline:none}.css.svelte-9qvh1i button.svelte-9qvh1i:first-child{border-radius:4px 0 0 4px}.css.svelte-9qvh1i button.svelte-9qvh1i:last-child{border-right:1px solid #e0e0e0;border-radius:0 4px 4px 0}.css.svelte-9qvh1i button.svelte-9qvh1i:not(.active):hover{background:#eee;cursor:pointer}.css.svelte-9qvh1i button.text.svelte-9qvh1i{width:auto;min-width:70px;cursor:pointer}.css.svelte-9qvh1i button.ellipse.svelte-9qvh1i:hover{background:inherit;cursor:default}.css.svelte-9qvh1i button.active.svelte-9qvh1i{background:#eee;font-weight:bold}.css.svelte-9qvh1i button.disabled.svelte-9qvh1i:hover{background:inherit;cursor:default}.css.mobile.svelte-9qvh1i button.disabled.svelte-9qvh1i{color:#bdbdbd}.css.mobile.svelte-9qvh1i button.svelte-9qvh1i{font-weight:bold}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	return child_ctx;
}

// (70:0) {:else}
function create_else_block$1(ctx) {
	let section;
	let button0;
	let t1;
	let button1;
	let t3;
	let button2;
	let t5;
	let button3;
	let section_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			section = element("section");
			button0 = element("button");
			button0.textContent = "❬❬";
			t1 = space();
			button1 = element("button");
			button1.textContent = "❮";
			t3 = space();
			button2 = element("button");
			button2.textContent = "❯";
			t5 = space();
			button3 = element("button");
			button3.textContent = "❭❭";
			attr(button0, "class", "svelte-9qvh1i");
			toggle_class(button0, "disabled", /*$pageNumber*/ ctx[5] === 1);
			attr(button1, "class", "svelte-9qvh1i");
			toggle_class(button1, "disabled", /*$pageNumber*/ ctx[5] === 1);
			attr(button2, "class", "svelte-9qvh1i");
			toggle_class(button2, "disabled", /*$pageNumber*/ ctx[5] === /*pageCount*/ ctx[2].length);
			attr(button3, "class", "svelte-9qvh1i");
			toggle_class(button3, "disabled", /*$pageNumber*/ ctx[5] === /*pageCount*/ ctx[2].length);
			attr(section, "class", section_class_value = "dt-pagination-buttons mobile " + /*classList*/ ctx[1] + " svelte-9qvh1i");
			toggle_class(section, "css", /*$options*/ ctx[3].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, button0);
			append(section, t1);
			append(section, button1);
			append(section, t3);
			append(section, button2);
			append(section, t5);
			append(section, button3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler_5*/ ctx[13]),
					listen(button1, "click", /*click_handler_6*/ ctx[14]),
					listen(button2, "click", /*click_handler_7*/ ctx[15]),
					listen(button3, "click", /*click_handler_8*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$pageNumber*/ 32) {
				toggle_class(button0, "disabled", /*$pageNumber*/ ctx[5] === 1);
			}

			if (dirty & /*$pageNumber*/ 32) {
				toggle_class(button1, "disabled", /*$pageNumber*/ ctx[5] === 1);
			}

			if (dirty & /*$pageNumber, pageCount*/ 36) {
				toggle_class(button2, "disabled", /*$pageNumber*/ ctx[5] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*$pageNumber, pageCount*/ 36) {
				toggle_class(button3, "disabled", /*$pageNumber*/ ctx[5] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*classList*/ 2 && section_class_value !== (section_class_value = "dt-pagination-buttons mobile " + /*classList*/ ctx[1] + " svelte-9qvh1i")) {
				attr(section, "class", section_class_value);
			}

			if (dirty & /*classList, $options*/ 10) {
				toggle_class(section, "css", /*$options*/ ctx[3].css);
			}
		},
		d(detaching) {
			if (detaching) detach(section);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (25:0) {#if $datatableWidth > 600}
function create_if_block$1(ctx) {
	let section;
	let button0;
	let raw0_value = /*$options*/ ctx[3].labels.previous + "";
	let t0;
	let button1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let button2;
	let raw1_value = /*$options*/ ctx[3].labels.next + "";
	let section_class_value;
	let mounted;
	let dispose;
	let if_block0 = /*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[5] >= 5 && create_if_block_4();
	let each_value = /*buttons*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block1 = /*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[5] <= /*pageCount*/ ctx[2].length - 3 && create_if_block_2();
	let if_block2 = /*pageCount*/ ctx[2].length > 1 && create_if_block_1$1(ctx);

	return {
		c() {
			section = element("section");
			button0 = element("button");
			t0 = space();
			button1 = element("button");
			button1.textContent = "1";
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			button2 = element("button");
			attr(button0, "class", "text svelte-9qvh1i");
			toggle_class(button0, "disabled", /*$pageNumber*/ ctx[5] === 1);
			attr(button1, "class", "svelte-9qvh1i");
			toggle_class(button1, "active", /*$pageNumber*/ ctx[5] === 1);
			attr(button2, "class", "text svelte-9qvh1i");
			toggle_class(button2, "disabled", /*$pageNumber*/ ctx[5] === /*pageCount*/ ctx[2].length);
			attr(section, "class", section_class_value = "dt-pagination-buttons " + /*classList*/ ctx[1] + " svelte-9qvh1i");
			attr(section, "ref", /*ref*/ ctx[0]);
			toggle_class(section, "css", /*$options*/ ctx[3].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, button0);
			button0.innerHTML = raw0_value;
			append(section, t0);
			append(section, button1);
			append(section, t2);
			if (if_block0) if_block0.m(section, null);
			append(section, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}

			append(section, t4);
			if (if_block1) if_block1.m(section, null);
			append(section, t5);
			if (if_block2) if_block2.m(section, null);
			append(section, t6);
			append(section, button2);
			button2.innerHTML = raw1_value;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[8]),
					listen(button1, "click", /*click_handler_1*/ ctx[9]),
					listen(button2, "click", /*click_handler_4*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$options*/ 8 && raw0_value !== (raw0_value = /*$options*/ ctx[3].labels.previous + "")) button0.innerHTML = raw0_value;
			if (dirty & /*$pageNumber*/ 32) {
				toggle_class(button0, "disabled", /*$pageNumber*/ ctx[5] === 1);
			}

			if (dirty & /*$pageNumber*/ 32) {
				toggle_class(button1, "active", /*$pageNumber*/ ctx[5] === 1);
			}

			if (/*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[5] >= 5) {
				if (if_block0) ; else {
					if_block0 = create_if_block_4();
					if_block0.c();
					if_block0.m(section, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*$pageNumber, buttons, setPage, pageCount*/ 180) {
				each_value = /*buttons*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(section, t4);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[5] <= /*pageCount*/ ctx[2].length - 3) {
				if (if_block1) ; else {
					if_block1 = create_if_block_2();
					if_block1.c();
					if_block1.m(section, t5);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*pageCount*/ ctx[2].length > 1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$1(ctx);
					if_block2.c();
					if_block2.m(section, t6);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*$options*/ 8 && raw1_value !== (raw1_value = /*$options*/ ctx[3].labels.next + "")) button2.innerHTML = raw1_value;
			if (dirty & /*$pageNumber, pageCount*/ 36) {
				toggle_class(button2, "disabled", /*$pageNumber*/ ctx[5] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*classList*/ 2 && section_class_value !== (section_class_value = "dt-pagination-buttons " + /*classList*/ ctx[1] + " svelte-9qvh1i")) {
				attr(section, "class", section_class_value);
			}

			if (dirty & /*ref*/ 1) {
				attr(section, "ref", /*ref*/ ctx[0]);
			}

			if (dirty & /*classList, $options*/ 10) {
				toggle_class(section, "css", /*$options*/ ctx[3].css);
			}
		},
		d(detaching) {
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			destroy_each(each_blocks, detaching);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (37:8) {#if pageCount.length > 6 && $pageNumber >= 5}
function create_if_block_4(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "...";
			attr(button, "class", "ellipse svelte-9qvh1i");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (42:12) {#if n > 0 && n < pageCount.length - 1}
function create_if_block_3(ctx) {
	let button;
	let t_value = /*n*/ ctx[19] + 1 + "";
	let t;
	let mounted;
	let dispose;

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[10](/*n*/ ctx[19], ...args);
	}

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", "svelte-9qvh1i");
			toggle_class(button, "active", /*$pageNumber*/ ctx[5] === /*n*/ ctx[19] + 1);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*buttons*/ 16 && t_value !== (t_value = /*n*/ ctx[19] + 1 + "")) set_data(t, t_value);

			if (dirty & /*$pageNumber, buttons*/ 48) {
				toggle_class(button, "active", /*$pageNumber*/ ctx[5] === /*n*/ ctx[19] + 1);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (41:8) {#each buttons as n}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*n*/ ctx[19] > 0 && /*n*/ ctx[19] < /*pageCount*/ ctx[2].length - 1 && create_if_block_3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*n*/ ctx[19] > 0 && /*n*/ ctx[19] < /*pageCount*/ ctx[2].length - 1) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (52:8) {#if pageCount.length > 6 && $pageNumber <= pageCount.length - 3}
function create_if_block_2(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "...";
			attr(button, "class", "ellipse svelte-9qvh1i");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (56:8) {#if pageCount.length > 1}
function create_if_block_1$1(ctx) {
	let button;
	let t_value = /*pageCount*/ ctx[2].length + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", "svelte-9qvh1i");
			toggle_class(button, "active", /*$pageNumber*/ ctx[5] === /*pageCount*/ ctx[2].length);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_3*/ ctx[11]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*pageCount*/ 4 && t_value !== (t_value = /*pageCount*/ ctx[2].length + "")) set_data(t, t_value);

			if (dirty & /*$pageNumber, pageCount*/ 36) {
				toggle_class(button, "active", /*$pageNumber*/ ctx[5] === /*pageCount*/ ctx[2].length);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$3(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*$datatableWidth*/ ctx[6] > 600) return create_if_block$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let $rowCount;
	let $options;
	let $pageNumber;
	let $datatableWidth;
	component_subscribe($$self, rowCount, $$value => $$invalidate(17, $rowCount = $$value));
	component_subscribe($$self, options, $$value => $$invalidate(3, $options = $$value));
	component_subscribe($$self, pageNumber, $$value => $$invalidate(5, $pageNumber = $$value));
	component_subscribe($$self, datatableWidth, $$value => $$invalidate(6, $datatableWidth = $$value));
	let { ref = "" } = $$props;
	let { classList = "" } = $$props;

	const slice = (arr, page) => {
		if (page < 5) {
			return arr.slice(0, 5);
		} else if (page > arr.length - 4) {
			return arr.slice(arr.length - 5, arr.length);
		}

		return arr.slice(page - 2, page + 1);
	};

	const setPage = number => {
		pageNumber.set(number);
		columns.redraw();
	};

	const click_handler = () => setPage($pageNumber - 1);
	const click_handler_1 = () => setPage(1);
	const click_handler_2 = n => setPage(n + 1);
	const click_handler_3 = () => setPage(pageCount.length);
	const click_handler_4 = () => setPage($pageNumber + 1);
	const click_handler_5 = () => setPage(1);
	const click_handler_6 = () => setPage($pageNumber - 1);
	const click_handler_7 = () => setPage($pageNumber + 1);
	const click_handler_8 = () => setPage(pageCount.length);

	$$self.$$set = $$props => {
		if ("ref" in $$props) $$invalidate(0, ref = $$props.ref);
		if ("classList" in $$props) $$invalidate(1, classList = $$props.classList);
	};

	let pageCount;
	let buttons;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$rowCount, $options*/ 131080) {
			 $$invalidate(2, pageCount = Array.from(Array(Math.ceil($rowCount / $options.rowPerPage)).keys()));
		}

		if ($$self.$$.dirty & /*pageCount, $pageNumber*/ 36) {
			 $$invalidate(4, buttons = slice(pageCount, $pageNumber));
		}
	};

	return [
		ref,
		classList,
		pageCount,
		$options,
		buttons,
		$pageNumber,
		$datatableWidth,
		setPage,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8
	];
}

class PaginationButtons extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-9qvh1i-style")) add_css$3();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { ref: 0, classList: 1 });
	}
}

/* src\components\Pagination.svelte generated by Svelte v3.29.4 */

function add_css$4() {
	var style = element("style");
	style.id = "svelte-195bjyp-style";
	style.textContent = "section.svelte-195bjyp{display:flex;flex-direction:row;justify-content:space-between;height:40px;padding-top:8px}.css.svelte-195bjyp{background:#fff}";
	append(document.head, style);
}

// (7:0) {#if $options.pagination && ($options.blocks.paginationRowCount || $options.blocks.paginationButtons)}
function create_if_block$2(ctx) {
	let section;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	const if_block_creators = [create_if_block_2$1, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$options*/ ctx[0].blocks.paginationRowCount) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*$options*/ ctx[0].blocks.paginationButtons && create_if_block_1$2();

	return {
		c() {
			section = element("section");
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr(section, "class", "dt-pagination svelte-195bjyp");
			toggle_class(section, "css", /*$options*/ ctx[0].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			if_blocks[current_block_type_index].m(section, null);
			append(section, t);
			if (if_block1) if_block1.m(section, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(section, t);
			}

			if (/*$options*/ ctx[0].blocks.paginationButtons) {
				if (if_block1) {
					if (dirty & /*$options*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$2();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(section, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty & /*$options*/ 1) {
				toggle_class(section, "css", /*$options*/ ctx[0].css);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
		}
	};
}

// (11:8) {:else}
function create_else_block$2(ctx) {
	let div;

	return {
		c() {
			div = element("div");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (9:8) {#if $options.blocks.paginationRowCount}
function create_if_block_2$1(ctx) {
	let paginationrowcount;
	let current;
	paginationrowcount = new PaginationRowCount({});

	return {
		c() {
			create_component(paginationrowcount.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationrowcount, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(paginationrowcount.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationrowcount.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationrowcount, detaching);
		}
	};
}

// (14:8) {#if $options.blocks.paginationButtons}
function create_if_block_1$2(ctx) {
	let paginationbuttons;
	let current;
	paginationbuttons = new PaginationButtons({});

	return {
		c() {
			create_component(paginationbuttons.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationbuttons, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(paginationbuttons.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationbuttons.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationbuttons, detaching);
		}
	};
}

function create_fragment$4(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$options*/ ctx[0].pagination && (/*$options*/ ctx[0].blocks.paginationRowCount || /*$options*/ ctx[0].blocks.paginationButtons) && create_if_block$2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$options*/ ctx[0].pagination && (/*$options*/ ctx[0].blocks.paginationRowCount || /*$options*/ ctx[0].blocks.paginationButtons)) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$options*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let $options;
	component_subscribe($$self, options, $$value => $$invalidate(0, $options = $$value));
	return [$options];
}

class Pagination extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-195bjyp-style")) add_css$4();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});
	}
}

const header = {
    removeOriginalThead: () => {
        setTimeout(() => {
            const thead = document.querySelector('.datatable table thead');
            const originHeight = thead.getBoundingClientRect().height;
            // const tableContainer = document.querySelector('section.datatable .dt-table')
            // const scrollXHeight = tableContainer.offsetHeight - tableContainer.clientHeight
            // - (scrollXHeight > 5 ? scrollXHeight + 10 : 1)
            thead.parentNode.style.marginTop = '-' + (originHeight) + 'px';
            thead.style.visibility = 'hidden';
        }, 50);
    },
    getOrginalTHeadClassList: () => {
        return document.querySelector('.datatable table thead').classList
    },
};

/* src\components\StickyHeader.svelte generated by Svelte v3.29.4 */

function add_css$5() {
	var style = element("style");
	style.id = "svelte-1sonwgi-style";
	style.textContent = "section.svelte-1sonwgi.svelte-1sonwgi{position:-webkit-sticky;position:sticky;top:0;left:0;z-index:6;background:inherit}.css.svelte-1sonwgi th.svelte-1sonwgi{padding:8px 0px 8px 16px;text-align:center;border-bottom:1px solid #eee;background:#fff}.css.svelte-1sonwgi th.sortable.svelte-1sonwgi{cursor:pointer}.css.svelte-1sonwgi th.sortable span.svelte-1sonwgi{padding-right:16px;position:relative}.css.svelte-1sonwgi th.sortable span.svelte-1sonwgi:before,.css.svelte-1sonwgi th.sortable span.svelte-1sonwgi:after{border:4px solid transparent;content:'';display:block;height:0;right:0;top:50%;position:absolute;width:0}.css.svelte-1sonwgi th.sortable span.svelte-1sonwgi:before{border-bottom-color:#e0e0e0;margin-top:-9px}.css.svelte-1sonwgi th.sortable span.svelte-1sonwgi:after{border-top-color:#e0e0e0;margin-top:1px}.css.svelte-1sonwgi th.sortable.asc span.svelte-1sonwgi:before{border-bottom-color:#9e9e9e}.css.svelte-1sonwgi th.sortable.desc span.svelte-1sonwgi:after{border-top-color:#9e9e9e}.css.svelte-1sonwgi th.filter.svelte-1sonwgi{padding:0;margin:0;background-image:none;border:1px solid #fafafa}th.filter.svelte-1sonwgi input.svelte-1sonwgi{margin:0;padding:0;width:100%}.css.svelte-1sonwgi th.filter input.svelte-1sonwgi{background:#fff;height:24px;border:none;border-bottom:1px solid #eee;text-align:center;outline:none;border-radius:0;font-size:14px}.css.svelte-1sonwgi th.filter input.svelte-1sonwgi::placeholder{color:#bdbdbd;font-style:italic;font-size:13px}";
	append(document.head, style);
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (17:12) {#each $columns as th}
function create_each_block_1(ctx) {
	let th;
	let html_tag;
	let raw_value = /*th*/ ctx[5].html + "";
	let span;
	let t;
	let th_class_value;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[3](/*th*/ ctx[5], ...args);
	}

	return {
		c() {
			th = element("th");
			span = element("span");
			t = space();
			html_tag = new HtmlTag(span);
			attr(span, "class", "svelte-1sonwgi");
			attr(th, "nowrap", "");
			set_style(th, "min-width", /*th*/ ctx[5].minWidth + "px");
			attr(th, "class", th_class_value = "" + (null_to_empty(/*th*/ ctx[5].classList) + " svelte-1sonwgi"));
			toggle_class(th, "sortable", /*th*/ ctx[5].key && /*$options*/ ctx[1].sortable === true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			html_tag.m(raw_value, th);
			append(th, span);
			append(th, t);

			if (!mounted) {
				dispose = listen(th, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*$columns*/ 4 && raw_value !== (raw_value = /*th*/ ctx[5].html + "")) html_tag.p(raw_value);

			if (dirty & /*$columns*/ 4) {
				set_style(th, "min-width", /*th*/ ctx[5].minWidth + "px");
			}

			if (dirty & /*$columns*/ 4 && th_class_value !== (th_class_value = "" + (null_to_empty(/*th*/ ctx[5].classList) + " svelte-1sonwgi"))) {
				attr(th, "class", th_class_value);
			}

			if (dirty & /*$columns, $columns, $options*/ 6) {
				toggle_class(th, "sortable", /*th*/ ctx[5].key && /*$options*/ ctx[1].sortable === true);
			}
		},
		d(detaching) {
			if (detaching) detach(th);
			mounted = false;
			dispose();
		}
	};
}

// (29:8) {#if $options.columnFilter === true}
function create_if_block$3(ctx) {
	let tr;
	let each_value = /*$columns*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$columns, $options, columns*/ 6) {
				each_value = /*$columns*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (33:24) {#if th.key}
function create_if_block_1$3(ctx) {
	let input;
	let input_placeholder_value;
	let mounted;
	let dispose;

	function input_handler(...args) {
		return /*input_handler*/ ctx[4](/*th*/ ctx[5], ...args);
	}

	return {
		c() {
			input = element("input");
			attr(input, "type", "text");
			attr(input, "placeholder", input_placeholder_value = /*$options*/ ctx[1].labels.filter);
			attr(input, "class", "browser-default svelte-1sonwgi");
		},
		m(target, anchor) {
			insert(target, input, anchor);

			if (!mounted) {
				dispose = listen(input, "input", input_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$options*/ 2 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[1].labels.filter)) {
				attr(input, "placeholder", input_placeholder_value);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (31:16) {#each $columns as th}
function create_each_block$1(ctx) {
	let th;
	let t;
	let if_block = /*th*/ ctx[5].key && create_if_block_1$3(ctx);

	return {
		c() {
			th = element("th");
			if (if_block) if_block.c();
			t = space();
			attr(th, "class", "filter svelte-1sonwgi");
			set_style(th, "width", /*th*/ ctx[5].width);
			set_style(th, "height", "25px");
		},
		m(target, anchor) {
			insert(target, th, anchor);
			if (if_block) if_block.m(th, null);
			append(th, t);
		},
		p(ctx, dirty) {
			if (/*th*/ ctx[5].key) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$3(ctx);
					if_block.c();
					if_block.m(th, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*$columns*/ 4) {
				set_style(th, "width", /*th*/ ctx[5].width);
			}
		},
		d(detaching) {
			if (detaching) detach(th);
			if (if_block) if_block.d();
		}
	};
}

function create_fragment$5(ctx) {
	let section;
	let thead;
	let tr;
	let t;
	let thead_class_value;
	let each_value_1 = /*$columns*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block = /*$options*/ ctx[1].columnFilter === true && create_if_block$3(ctx);

	return {
		c() {
			section = element("section");
			thead = element("thead");
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			attr(thead, "class", thead_class_value = "" + (null_to_empty(/*theadClassList*/ ctx[0]) + " svelte-1sonwgi"));
			attr(section, "class", "dt-header svelte-1sonwgi");
			toggle_class(section, "sortable", /*$options*/ ctx[1].sortable === true);
			toggle_class(section, "css", /*$options*/ ctx[1].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, thead);
			append(thead, tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(thead, t);
			if (if_block) if_block.m(thead, null);
		},
		p(ctx, [dirty]) {
			if (dirty & /*$columns, $options, columns*/ 6) {
				each_value_1 = /*$columns*/ ctx[2];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (/*$options*/ ctx[1].columnFilter === true) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(thead, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*theadClassList*/ 1 && thead_class_value !== (thead_class_value = "" + (null_to_empty(/*theadClassList*/ ctx[0]) + " svelte-1sonwgi"))) {
				attr(thead, "class", thead_class_value);
			}

			if (dirty & /*$options*/ 2) {
				toggle_class(section, "sortable", /*$options*/ ctx[1].sortable === true);
			}

			if (dirty & /*$options*/ 2) {
				toggle_class(section, "css", /*$options*/ ctx[1].css);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let $options;
	let $columns;
	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
	component_subscribe($$self, columns, $$value => $$invalidate(2, $columns = $$value));
	let theadClassList;

	onMount(() => {
		columns.draw();
		header.removeOriginalThead();
		$$invalidate(0, theadClassList = header.getOrginalTHeadClassList());
	});

	const click_handler = (th, e) => columns.sort(e.target, th.key);
	const input_handler = (th, e) => columns.filter(th.key, e.target.value);
	return [theadClassList, $options, $columns, click_handler, input_handler];
}

class StickyHeader extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1sonwgi-style")) add_css$5();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});
	}
}

/* src\Datatable.svelte generated by Svelte v3.29.4 */

function add_css$6() {
	var style = element("style");
	style.id = "svelte-udk322-style";
	style.textContent = ".datatable.svelte-udk322.svelte-udk322{position:relative}.css.datatable.svelte-udk322.svelte-udk322{background:#fff}.datatable.scroll-y.svelte-udk322.svelte-udk322{height:160px}.datatable.svelte-udk322 .svelte-udk322{box-sizing:border-box}article.svelte-udk322.svelte-udk322{position:relative;overflow-y:auto;overflow-x:hidden;width:100%;background:inherit}.css.svelte-udk322 article.svelte-udk322{border-bottom:1px solid #e0e0e0;scrollbar-width:thin}.css.svelte-udk322 article.svelte-udk322::-webkit-scrollbar{width:6px;height:6px}.css.svelte-udk322 article.svelte-udk322::-webkit-scrollbar-track{background:#f5f5f5}.css.svelte-udk322 article.svelte-udk322::-webkit-scrollbar-thumb{background:#c2c2c2}.css.svelte-udk322 article.svelte-udk322::-webkit-scrollbar-thumb:hover{background:#9e9e9e}.css.svelte-udk322 article.svelte-udk322::-webkit-scrollbar-track-piece:start{top:40px}.css.svelte-udk322 table.svelte-udk322{width:100%;border-collapse:collapse;overflow:hidden;margin-bottom:6px}";
	append(document.head, style);
}

// (20:1) {#if $options.blocks.searchInput === true}
function create_if_block_2$2(ctx) {
	let search;
	let current;
	search = new Search({});

	return {
		c() {
			create_component(search.$$.fragment);
		},
		m(target, anchor) {
			mount_component(search, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(search.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(search.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(search, detaching);
		}
	};
}

// (24:2) {#if $options.scrollY}
function create_if_block_1$4(ctx) {
	let stickyheader;
	let current;
	stickyheader = new StickyHeader({});

	return {
		c() {
			create_component(stickyheader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(stickyheader, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(stickyheader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(stickyheader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(stickyheader, detaching);
		}
	};
}

// (31:1) {#if $options.blocks.paginationRowCount === true || $options.blocks.paginationButtons === true}
function create_if_block$4(ctx) {
	let pagination;
	let current;
	pagination = new Pagination({});

	return {
		c() {
			create_component(pagination.$$.fragment);
		},
		m(target, anchor) {
			mount_component(pagination, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(pagination.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pagination.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(pagination, detaching);
		}
	};
}

function create_fragment$6(ctx) {
	let section;
	let t0;
	let article;
	let t1;
	let table;
	let t2;
	let section_class_value;
	let current;
	let if_block0 = /*$options*/ ctx[1].blocks.searchInput === true && create_if_block_2$2();
	let if_block1 = /*$options*/ ctx[1].scrollY && create_if_block_1$4();
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let if_block2 = (/*$options*/ ctx[1].blocks.paginationRowCount === true || /*$options*/ ctx[1].blocks.paginationButtons === true) && create_if_block$4();

	return {
		c() {
			section = element("section");
			if (if_block0) if_block0.c();
			t0 = space();
			article = element("article");
			if (if_block1) if_block1.c();
			t1 = space();
			table = element("table");
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block2) if_block2.c();
			attr(table, "class", "svelte-udk322");
			attr(article, "class", "dt-table svelte-udk322");
			attr(section, "class", section_class_value = "datatable " + /*classList*/ ctx[0] + " svelte-udk322");
			toggle_class(section, "scroll-y", /*$options*/ ctx[1].scrollY);
			toggle_class(section, "css", /*$options*/ ctx[1].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			if (if_block0) if_block0.m(section, null);
			append(section, t0);
			append(section, article);
			if (if_block1) if_block1.m(article, null);
			append(article, t1);
			append(article, table);

			if (default_slot) {
				default_slot.m(table, null);
			}

			append(section, t2);
			if (if_block2) if_block2.m(section, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$options*/ ctx[1].blocks.searchInput === true) {
				if (if_block0) {
					if (dirty & /*$options*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2$2();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(section, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*$options*/ ctx[1].scrollY) {
				if (if_block1) {
					if (dirty & /*$options*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$4();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(article, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			if (/*$options*/ ctx[1].blocks.paginationRowCount === true || /*$options*/ ctx[1].blocks.paginationButtons === true) {
				if (if_block2) {
					if (dirty & /*$options*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$4();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(section, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*classList*/ 1 && section_class_value !== (section_class_value = "datatable " + /*classList*/ ctx[0] + " svelte-udk322")) {
				attr(section, "class", section_class_value);
			}

			if (dirty & /*classList, $options*/ 3) {
				toggle_class(section, "scroll-y", /*$options*/ ctx[1].scrollY);
			}

			if (dirty & /*classList, $options*/ 3) {
				toggle_class(section, "css", /*$options*/ ctx[1].css);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block2) if_block2.d();
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	let $options;
	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	let { data = [] } = $$props;
	let { settings = {} } = $$props;
	let { classList = "" } = $$props;
	onMount(() => datatable.init());
	onDestroy(() => datatable.reset());

	$$self.$$set = $$props => {
		if ("data" in $$props) $$invalidate(2, data = $$props.data);
		if ("settings" in $$props) $$invalidate(3, settings = $$props.settings);
		if ("classList" in $$props) $$invalidate(0, classList = $$props.classList);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*data, settings*/ 12) {
			 {
				datatable.setRows(data);
				options.update(settings);
			}
		}
	};

	return [classList, $options, data, settings, $$scope, slots];
}

class Datatable extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-udk322-style")) add_css$6();
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { data: 2, settings: 3, classList: 0 });
	}
}

/* src\ColumnFilterInputs.svelte generated by Svelte v3.29.4 */

function add_css$7() {
	var style = element("style");
	style.id = "svelte-a9sdic-style";
	style.textContent = ".css.svelte-a9sdic.svelte-a9sdic{padding:0;margin:0;background-image:none;border:1px solid #fafafa}th.filter.svelte-a9sdic input.svelte-a9sdic{margin:0;padding:0;width:100%}.css.svelte-a9sdic input.svelte-a9sdic{background:#fff;height:24px;border:none;border-bottom:1px solid #eee;text-align:center;outline:none;border-radius:0;font-size:14px}.css.svelte-a9sdic input.svelte-a9sdic::placeholder{color:#bdbdbd;font-style:italic;font-size:13px}";
	append(document.head, style);
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (17:4) {:else}
function create_else_block$3(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "class", "filter");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (8:4) {#if column.key}
function create_if_block$5(ctx) {
	let th;
	let input;
	let input_placeholder_value;
	let t;
	let mounted;
	let dispose;

	function input_handler(...args) {
		return /*input_handler*/ ctx[2](/*column*/ ctx[3], ...args);
	}

	return {
		c() {
			th = element("th");
			input = element("input");
			t = space();
			attr(input, "type", "text");
			attr(input, "placeholder", input_placeholder_value = /*$options*/ ctx[1].labels.filter);
			attr(input, "class", "browser-default svelte-a9sdic");
			attr(th, "class", "filter svelte-a9sdic");
			toggle_class(th, "css", /*$options*/ ctx[1].css);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, input);
			append(th, t);

			if (!mounted) {
				dispose = listen(input, "input", input_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$options*/ 2 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[1].labels.filter)) {
				attr(input, "placeholder", input_placeholder_value);
			}

			if (dirty & /*$options*/ 2) {
				toggle_class(th, "css", /*$options*/ ctx[1].css);
			}
		},
		d(detaching) {
			if (detaching) detach(th);
			mounted = false;
			dispose();
		}
	};
}

// (7:0) {#each $columns as column}
function create_each_block$2(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*column*/ ctx[3].key) return create_if_block$5;
		return create_else_block$3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$7(ctx) {
	let tr;
	let each_value = /*$columns*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	return {
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$options, columns, $columns*/ 3) {
				each_value = /*$columns*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(tr);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	let $columns;
	let $options;
	component_subscribe($$self, columns, $$value => $$invalidate(0, $columns = $$value));
	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
	const input_handler = (column, e) => columns.filter(column.key, e.target.value);
	return [$columns, $options, input_handler];
}

class ColumnFilterInputs extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-a9sdic-style")) add_css$7();
		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});
	}
}

export { ColumnFilterInputs, Datatable, PaginationButtons, PaginationRowCount, SearchInput, rows };
